@using BlazorState
@inherits QuizTime.Client.BlazorWasm.Shared.UI.SettingsStateComponentBase

@using QuizTime.Client.BlazorWasm.Features.Game 
@using QuizTime.Client.BlazorWasm.Shared.Data
@using QuizTime.Client.BlazorWasm.Shared.UI.Composite
@using QuizTime.Client.BlazorWasm.Shared.UI.Element
@using QuizTime.Shared.Data

<Header Title="New Game" ShowCloseButton="true" OnClose="OnCloseHandler"/>
<ContentArea CustomClass="py-4">
        @foreach (var player in Players)
        {
            <div class="p-4 mb-2 max-w-sm mx-auto bg-white rounded-xl shadow-md flex flex-row items-center justify-between">
                <div class="flex flex-row items-center justify-between space-x-3">
                    <label >
                        <div class="flex flex-row items-center justify-between space-x-3">
                            <input type="checkbox" checked="@(IsChecked(player))" @onchange="@(args => CheckboxCheckedHandler(player, (bool)args.Value))" 
                                class="form-tick cursor-pointer h-6 w-6 border border-gray-300 rounded-md checked:bg-blue-600 checked:border-transparent focus:outline-none">
                            <span class="font-medium text-xl">@player.Name</span>
                        </div>
                    </label>
                    <div class="cursor-pointer" @onclick="@(() => OnEditPlayerName(player))">
                        <svg class="w-4 h-4 stroke-current"xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                    </div>
                </div>
                <div class="flex flex-row space-x-1">
                     <div class="w-8 h-8 rounded-full cursor-pointer @(ColorSelectBorderStyle(player,ThemeColor.Pink)) hover:bg-@(SettingsState.ThemeColorString)-100 flex flex-row justify-center items-center">
                        <div class="w-6 h-6 bg-pink-500 rounded-full" @onclick="(e => OnPlayerColorChanged(player, ThemeColor.Pink))"></div>
                    </div>
                    <div class="w-8 h-8 rounded-full cursor-pointer @(ColorSelectBorderStyle(player, ThemeColor.Blue)) hover:bg-@(SettingsState.ThemeColorString)-100 flex flex-row justify-center items-center">
                        <div class="w-6 h-6 bg-blue-500 rounded-full" @onclick="(e => OnPlayerColorChanged(player, ThemeColor.Blue))"></div>
                    </div>
                    <div class="w-8 h-8 rounded-full cursor-pointer @(ColorSelectBorderStyle(player, ThemeColor.Green)) hover:bg-@(SettingsState.ThemeColorString)-100 flex flex-row justify-center items-center">
                        <div class="w-6 h-6 bg-green-500 rounded-full" @onclick="(e => OnPlayerColorChanged(player, ThemeColor.Green))"></div>
                    </div>
                    <div class="w-8 h-8 rounded-full cursor-pointer @(ColorSelectBorderStyle(player, ThemeColor.Yellow)) hover:bg-@(SettingsState.ThemeColorString)-100 flex flex-row justify-center items-center">
                        <div class="w-6 h-6 bg-yellow-500 rounded-full" @onclick="(e => OnPlayerColorChanged(player, ThemeColor.Yellow))"></div>
                    </div>
                    <div class="w-8 h-8 rounded-full cursor-pointer @(ColorSelectBorderStyle(player, ThemeColor.Purple)) hover:bg-@(SettingsState.ThemeColorString)-100 flex flex-row justify-center items-center">
                        <div class="w-6 h-6 bg-purple-500 rounded-full" @onclick="(e => OnPlayerColorChanged(player, ThemeColor.Purple))"></div>
                    </div>
                </div>
            </div>
        }

        @if(GameState.Players.Count > 0)
        {
            <div class="p-4 mb-2 max-w-xs mx-auto flex flex-row justify-center items-center">
                <PlayButton Size="Shared.UI.Size.Small" OnClick="OnClickPlay"/>
            </div>
        }

</ContentArea> 

<Footer />

@code
{
    [CascadingParameter] public IModalService Modal { get; set; }

    private GameState GameState => GetState<GameState>();

    private IEnumerable<Player> Players {get; set;}

    private bool ShowPlay {get; set;}

    [Inject]
    protected QuizDataService DataService { get; set; }

    protected override void OnInitialized()
    {
        Players = DataService.GetPlayers();
    }

    protected string ColorSelectBorderStyle(Player player, ThemeColor color)
    {
        if (player.Color != color)
        {
            return String.Empty;
        }
        
        return $"bg-{SettingsState.ThemeColorString}-300 shadow";
    }

    private async Task OnClickPlay()
    {
        await Mediator.Send(new GameState.UpdateGameModeAction { Value = GameMode.Play });
    }

    private void OnCloseHandler()
    {
        Mediator.Send(new GameState.UpdateGameModeAction { Value = GameMode.Start });
    }

    private bool IsChecked(Player p)
    {
        return GameState.PlayerExists(p);
    }

    private void CheckboxCheckedHandler(Player player, bool isChecked)
    {   
        if (isChecked)
        {
            Mediator.Send(new GameState.AddPlayerAction { Value = player });
        }
        else
        {
            Mediator.Send(new GameState.DeletePlayerAction { Value = player });
        }
    }

    private void OnPlayerColorChanged(Player player, ThemeColor color)
    {
        player.Color = color;
        StateHasChanged();
    }

    private async Task OnEditPlayerName(Player player)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditPlayerName.Player), player.Copy());

        var options = new ModalOptions()
        {
            Class = $"blazored-modal bg-{SettingsState.ThemeColorString}-100 w-3/4",
            HideCloseButton = true,
            HideHeader = true,
        };

        var modal = Modal.Show<EditPlayerName>("Edit Player", parameters, options);
        var modalResults = await modal.Result;

        if (!modalResults.Cancelled)
        {
            var modifiedPlayer = modalResults.Data as Player;
            player.Name = modifiedPlayer.Name;
        }
    }
}    