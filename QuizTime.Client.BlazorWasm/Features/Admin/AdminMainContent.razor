@using QuizTime.Shared.Data
@using Shared.Data
@using QuizTime.Client.BlazorWasm.Features.Admin.EditItem
@inherits QuizTime.Client.BlazorWasm.Shared.UI.StateComponentBase

<div id="admin-content-main" class="flex-auto flex flex-row">
    
    @* Add back once we have more time to implement question set

    <div id="admin-content-main-listview" class="flex-none w-64 flex flex-col">
    
        <div id="admin-content-main-listview-header" class="flex-none h-14 border-b border-gray-400 shadow flex flex-row justify-between items-center">
            <div id="header-icon-group-left">
                <div class="uppercase text-sm font-semibold pl-3">Question Sets</div>
            </div>
            <div id="header-icon-group-right" class="flex flex-row space-x-2 items-center">
                <div class="">
                    <svg class="w-5 h-5 stroke-current" xmlns="http://www.w3.org/2000/svg" fill="none"
                        viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.25"
                            d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
                    </svg>
                </div>
                <div class="">
                    <svg class="w-4 h-4 stroke-current" xmlns="http://www.w3.org/2000/svg" fill="none"
                        viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.25"
                            d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                    </svg>
                </div>
                <div class="pr-2">
                    <svg class="w-4 h-4 stroke-current" xmlns="http://www.w3.org/2000/svg" fill="none"
                        viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.25"
                            d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
                    </svg>
                </div>

            </div>
        </div>
        <div id="admin-content-main-listview-content" class="flex-auto border divide-y divide-gray-300 bg-gray-50">

            @foreach(var questionSet in QuestionSetList)
            {
                <div id="item" class="h-10 @(questionSet.ShowDetails ? $"bg-{State.ThemeColorString}-200" : "") hover:bg-@(State.ThemeColorString)-100 flex flex-row items-center">
                    <div class="pl-2 flex none flex flex-row items-center">

                        <input type="checkbox"
                            class="form-tick h-4 w-4 border border-gray-300 rounded-md checked:bg-blue-600 checked:border-transparent focus:outline-none">

                        <svg class="w-6 h-6 pl-2 stroke-current" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
                        </svg>
                    </div>
                    <p class="pl-1 pr-1 truncate ...">@questionSet.Name</p>
                </div>
            }



        </div>  
    </div>
    *@

    <div id="admin-content-main-view-content" class="flex-auto flex flex-col border-l border-gray-400 shadow-xl">
        <div id="admin-content-main-details-header" class="flex-none h-10 border-b border-gray-400 shadow flex flex-row justify-between items-center">
            <div id="header-icon-group-left" class="flex flex-row items-center space-x-3">

                <!-- Bar Title Label -->
                <div class="uppercase text-sm font-semibold pl-3">Quiz Items</div>

                <!-- Item Count Label -->
                <div class="w-6 h-6 rounded-full bg-@(State.ThemeColorString)-500 text-white text-fine text-sm flex justify-center items-center">
                    <div>@QuizItems?.Count</div>
                </div>

                <!-- QuizItem Add Button -->
                <div class="cursor-pointer hover:text-@(State.ThemeColorString)-900" @onclick=OnAddNewQuizItemHandler >
                    <svg class="w-5 h-5 stroke-current" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                            d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                </div>
                <!-- QuizItem Delete Button -->
                <div class="pr-2 cursor-pointer hover:text-@(State.ThemeColorString)-900" @onclick=OnDeleteQuizItemsHandler >
                    <svg class="w-5 h-5 stroke-current" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" >
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                            d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                </div>
            </div>

            <div id="header-icon-group-right" class="flex flex-row space-x-2 items-center">
                
                <!-- Search Text Box -->
                <div class="pr-3 form-group">
                    <input class="w-48 pl-1 py-1 form-control text-sm"
                            @bind="SearchTerm"
                            id="search"
                            placeholder="Search..." 
                            @bind:event="oninput"/>
                </div>

            </div>
        </div>
        <div id="admin-content-main-details-content" class="flex-auto flex flex-row bg-gray-50">
            
            @if (isLoading)
            {    
                <div class="flex-auto flex flex-col justify-center items-center">
                    <SpinKitWave/>
                    <div class="-mt-8 text-lg text-gray-600">Loading...</div>
                </div>
            }
            else
            {
                <table class="flex-auto table-fixed">
                    <thead>
                        <tr class="shadow-md">
                            <th class="w-10"></th>
                            <th class="w-10"></th>
                            <th align="left" class="w-1/12 px-4 py-2 border border-gray-100">Type</th>
                            <th align="left" class="px-4 py-2 border border-gray-100">Question</th>
                        </tr>
                    </thead>
                    <tbody>
                
                    @for(var i = 0; i < SearchResults.Count; i++)
                    {
                        var idx = i; // a copy of the idx must be
                        var quizItem = SearchResults[i];
                        <tr class="@(SelectedItemIndices.Contains(i) ? $"bg-{State.ThemeColorString}-200" : "")">
                            <td class="px-2 py-1 border">
                                <input type="checkbox" checked="@(SelectedItemIndices.Contains(i))" @onchange="@(args => SelectedItemChangedHanlder(idx, (bool)args.Value))"
                                    class="mt-1 h-5 w-5 form-tick cursor-pointer border border-gray-300 rounded-md checked:bg-blue-600 checked:border-transparent focus:outline-none"/>
                            </td>
                            <td class="px-2 py-1 border">
                                <div class="cursor-pointer text-gray-500 hover:text-@(State.ThemeColorString)-900" @onclick=@(_ => OnEditQuizItemHandler(quizItem))>
                                    <svg class="w-6 h-6 stroke-current" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" >
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z">                                    
                                        </path>
                                    </svg>
                                </div>
                            </td>
                            <td class="px-4 py-1 border">@quizItem.QuestionType</td>
                            <td class="px-4 py-1 border">@quizItem.Question[0]</td>
                        </tr>
                    }

                    </tbody>


                </table>
            }
        </div>
    </div>
</div>

@code
{   
    [Inject]
    protected HttpClient Http { get; set; }

    [Inject]
    protected  QuizDataService DataService {get; set;}

    [CascadingParameter] 
    public IModalService Modal { get; set; }

    private bool isLoading;

    protected List<IQuizItem> QuizItems {get; set;} = new List<IQuizItem>();

    protected string SearchTerm { get; set; }

    protected List<IQuizItem> SearchResults
    {
        get
        {
            if (string.IsNullOrWhiteSpace(SearchTerm))
            {
                return QuizItems;
            }

            @* int skillLevel;
            if (Int32.TryParse(SearchTerm, out skillLevel))
            {
                return QuizItems?.Where(i => i. == skillLevel).ToList();
            } *@

            return QuizItems?.Where(i =>
                i.Question[0].ToLower().Contains(SearchTerm.ToLower()) ||
                (i.Question.Length > 1 && i.Question[1].ToLower().Contains(SearchTerm.ToLower())) ||
                (i.Question.Length > 2 && i.Question[2].ToLower().Contains(SearchTerm.ToLower())) ||
                (i.Question.Length > 3 && i.Question[3].ToLower().Contains(SearchTerm.ToLower())) ||
                (i.Question.Length > 4 && i.Question[4].ToLower().Contains(SearchTerm.ToLower()))).ToList();
        }
    }

    protected override void OnInitialized()
    {
        isLoading = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isLoading)
        {
            isLoading = true;
            QuizItems = new List<IQuizItem>();
            QuizItems = await DataService.GetQuizItems(Http, 0, 0);
            isLoading = false;
            StateHasChanged();
        }
    }

    public List<int> SelectedItemIndices {get; private set;} = new List<int>();
    
    private void SelectedItemChangedHanlder(int index, bool value)
    {
        if (value)
        {
            SelectedItemIndices.Add(index);
        }
        else
        {
            SelectedItemIndices.Remove(index);
        }
    }

    private async Task OnEditQuizItemHandler(IQuizItem item)
    {
        await CreateOrEditQuizItem(false, item);
    }

    private async Task OnAddNewQuizItemHandler()
    {
        await CreateOrEditQuizItem(true, new MultipleChoiceQuizItem());
    }

    private async Task CreateOrEditQuizItem(bool createNew, IQuizItem item)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditQuizItem.QuizItem), item);

        var options = new ModalOptions()
        {
            Class = $"blazored-modal bg-gray-50 w-7/8 md:w-3/4",
            HideCloseButton = true,
            HideHeader = true,
        };

        var title = createNew ? "New Quiz Item" : "Edit Quiz Item";
        var modal = Modal.Show<EditQuizItem>(title, parameters, options);
        var modalResults = await modal.Result;

        if (!modalResults.Cancelled)
        {
            var modifiedItem = modalResults.Data as IQuizItem;
            var dto = (QuizItemDto)modifiedItem.Dto();

            try
            {
                HttpResponseMessage response = null;
                if (createNew)
                {
                    response = await Http.PostAsJsonAsync<QuizItemDto>($"/api/items", dto);
                }
                else
                {
                    response = await Http.PutAsJsonAsync<QuizItemDto>($"/api/items/{modifiedItem.Id}", dto);
                }

                if (!response.IsSuccessStatusCode)
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error -  StatusCode:'{response.StatusCode}', Msg: {errorMessage}");
                    return;
                }

                isLoading = true;
            }
            catch (Exception e)
            {
                Console.WriteLine($"Exception: {e.Message}");
            }
        }
    }
    
    private async Task OnDeleteQuizItemsHandler()
    {
        foreach (var index in SelectedItemIndices)
        {
            try
            {
                var response = await Http.DeleteAsync($"/api/items/{QuizItems[index].Id}");
                
                if (!response.IsSuccessStatusCode)
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error -  StatusCode:'{response.StatusCode}', Msg: {errorMessage}");
                    return;
                }

                isLoading = true;
            }
            catch (Exception e)
            {
                Console.WriteLine($"Exception: {e.Message}");
            }
        }
    }
    
}    