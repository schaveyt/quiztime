@using QuizTime.Client.BlazorWasm.Features.Game
@using QuizTime.Client.BlazorWasm.Shared.UI.Composite
@using QuizTime.Client.BlazorWasm.Shared.UI.Element
@using QuizTime.Shared.Data
@using QuizTime.Client.BlazorWasm.Shared.Data

@inherits QuizTime.Client.BlazorWasm.Shared.UI.StateComponentBase

<Header Title="Question" ShowCloseButton="true" OnClose="OnClickClose"/>
<ContentArea CustomClass="flex flex-row justify-center">

<div class="flex flex-col pt-3 pb-5 space-y-3">
    <div class="flex-auto text-xl md:text-2xl px-6 md:px-48 flex flex-col space-y-4">
        <div class="flex flex-row justify-center item-center">
            <h2 class="text-4xl md:text-5xl">@Player.Name</h2>
        </div>
        <div>
            <strong class="text-2xl md:text-3xl">@QuizItem.Question[0]</strong>
            <ol class="pt-3 md:px-16">
                @for (var i = 1; i < 5; i++)
                {
                    @if (i < QuizItem.Question.Length)
                    {
                        <li class="@(ChoiceOptionStyle(i)) py-3">
                            <button 
                                class="w-14 h-10 pb-1
                                rounded shadow
                                text-md text-center
                                bg-@(GameState.ThemeColorString)-600 
                                text-@(GameState.ThemeColorString)-100 
                                hover:bg-@(GameState.ThemeColorString)-400" 
                                @onclick="@(e => OnAnswerHandlerAsync(i))">@IndexToLetterMap[i]</button>
                            <span class="pl-1">@QuizItem.Question[i]</span>
                        </li>
                    }
                }
            </ol>
        </div>
        
        
    </div>

    
    <div class="flex flex-row justify-around items-center text-md md:text-2xl">
        @if (!ShowAnswer)
        {
            <MainButton Text="Skip" OnClick="OnSkipHandlerAsync" Color="@(State.SecondaryColorString)"/>
        }
        else
        {
            <div class="-mt-4 flex flex-col items-center space-y-3">

                <div class="w-48 h-32 md:w-80 md:h-56 md:-mt-10 rounded-md">
                    <img src="@(QuizItem.AnswerIndex == UserAnswerIndex ? GetSuccessImage() : GetFailImage())" />
                </div>
                
                <button class="p-3 bg-@(QuizItem.AnswerIndex == UserAnswerIndex ? State.TrinaryColorString : State.SecondaryColorString)-600 flex items-center justify-center rounded-lg text-white">
                    <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    @if(QuizItem.AnswerIndex == UserAnswerIndex)
                    {
                        <span>Correct!</span>
                    }
                    else
                    {
                        <span>Incorrect</span>
                    }
                </button>
            </div>
        }
    </div>

</div>
</ContentArea>

<Footer />

@code
{
    private GameState GameState => GetState<GameState>();

    private IQuizItem QuizItem => GameState.CurrentQuizItem;

    private Player Player => GameState.CurrentPlayer;

    private bool ShowAnswer {get; set;}

    private int UserAnswerIndex {get; set;}

    private List<string> SuccessImages {get; set;}

    private IDictionary<int, string> IndexToLetterMap {get; set;} = 
        new SortedList<int, string>(){
            {1, "a"},
            {2, "b"},
            {3, "c"},
            {4, "d"},
        };
    
    [Inject]
    protected QuizDataService DataService {get; set;}

    protected override void OnInitialized()
    {
        ShowAnswer = false;
    }

    private void OnClickClose()
    {
        Mediator.Send(new GameState.UpdateGameModeAction { Value = GameMode.NewGame });
    }

    private async Task OnSkipHandlerAsync()
    {
        await Mediator.Send(new GameState.UpdatePlayModeAction { Value = PlayMode.OnDeck, GotoNextPlayerDisabled = true });
    }

    private async Task OnAnswerHandlerAsync(int answerIndex)
    {
        UserAnswerIndex = answerIndex;
        ShowAnswer = true;
        StateHasChanged();
        await Task.Delay(4000);
        ShowAnswer = false;
        UserAnswerIndex = -1;
        await Mediator.Send(new GameState.UpdatePlayModeAction { Value = PlayMode.OnDeck });
    }

    private string ChoiceOptionStyle(int index)
    {   
        if(ShowAnswer)
        {
            return index == QuizItem.AnswerIndex ? 
                $"animate-pulse text-{State.TrinaryColorString}-600" : 
                "text-{State.ThemeColorString}-100";
        }
        return null;        
    }

    private string GetSuccessImage()
    {
        var randomId = new Random().Next(0, DataService.SuccessImages.Count);
        return DataService.SuccessImages[randomId];
    }

    private string GetFailImage()
    {
        var randomId = new Random().Next(0, DataService.FailImages.Count);
        return DataService.FailImages[randomId];
    }
}    