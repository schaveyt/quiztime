@using BlazorState

@using QuizTime.Client.BlazorWasm.Features.Game 
@using QuizTime.Client.BlazorWasm.Shared.Data
@using QuizTime.Client.BlazorWasm.Shared.UI.Composite
@using QuizTime.Client.BlazorWasm.Shared.UI.Element
@using QuizTime.Shared.Data
@inherits QuizTime.Client.BlazorWasm.Shared.UI.StateComponentBase

<Header Title="On Deck" ShowCloseButton="false" />
<ContentArea CustomClass="flex flex-col justify-around items-center space-y-12">
    <div class="flex flex-col justify-center items-center space-y-4">
        <div class="text-6xl text-@(State.ThemeColorString)-500">@State.CurrentPlayer.Name</div>
        <div class="text-4xl">You're next!</div>
    </div>

    <Countdown Duration=3 OnTimeRemainingChanged="@(time => OnTimeRemainingChanged(time))">
        <div class="text-6xl">@timeRemaining</div>
    </Countdown>

    @if (isLoading && timeRemaining == 0)
    {
        <div class="flex-auto flex flex-col justify-center items-center">
            <SpinKitWave/>
            <div class="-mt-8 text-lg text-gray-600">Still fetching next question...</div>
        </div>
    }

</ContentArea> 

<Footer />

@code
{
    protected uint timeRemaining {get;set;}

    [Inject]
    protected HttpClient Http { get; set; }

    [Inject]
    protected QuizDataService DataService { get; set; }

    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
 
        var nextQuestion = await DataService.GetNextQuizItem(Http,
            State.CurrentPlayer.MinLevel, State.CurrentPlayer.MaxLevel);

        isLoading = false;

        await Mediator.Send(new GameState.UpdateQuizQuestionAction { Value = nextQuestion });

        if (timeRemaining == 0)
        {
            await Mediator.Send(new GameState.UpdatePlayModeAction { Value = PlayMode.Question });
        }
    }

    protected void OnTimeRemainingChanged(uint newTimeRemaining)
    {
        Console.WriteLine("timer complete");
        timeRemaining = newTimeRemaining;
        if (timeRemaining == 0 && !isLoading)
        {
            Console.WriteLine("change playmode to to question");
            Mediator.Send(new GameState.UpdatePlayModeAction { Value = PlayMode.Question });
        }
    }
} 