@using QuizTime.Shared.UI.Element
@using Shared.Data
@using QuizTime.Features.Settings
@inherits SettingsStateComponentBase

<div class="flex flex-col pt-3 pb-5 space-y-3">
    <div class="flex-auto text-4xl px-6 flex flex-col justify-center">
        
        @switch (QuizItem.QuestionType)
        {
            case QuestionTypeEnum.MultipleChoice:
                <p>@QuizItem.Question[0]</p>
                <ol class="pt-8">
                    @if (QuizItem.Question.Length > 1)
                    {
                        <li class="@(ChoiceOptionStyle(0))">a) @QuizItem.Question[1]</li>
                    }
                    @if (QuizItem.Question.Length > 2)
                    {
                        <li class="@(ChoiceOptionStyle(1))">b) @QuizItem.Question[2]</li>
                    }
                    @if (QuizItem.Question.Length > 3)
                    {
                        <li class="@(ChoiceOptionStyle(2))">c) @QuizItem.Question[3]</li>
                    }
                    @if (QuizItem.Question.Length > 4)
                    {
                        <li class="@(ChoiceOptionStyle(3))">d) @QuizItem.Question[4]</li>
                    }
                </ol>
                break;

            case QuestionTypeEnum.Boolean:
                <strong>True or False?</strong>
                <p>@QuizItem.Question[0]</p>
                break;

            case QuestionTypeEnum.Verbal:
                <p>@QuizItem.Question[0]</p>
                break;
            
            default:
                break;
        }
        
        
    </div>

    
    <div class="flex flex-row justify-around items-center text-2xl">
        @if (!ShowAnswer)
        {
            <MainButton Text="Skip" OnClick="OnSkipHandler" Color="@(SettingsState.SecondaryColorString)"/>

            @switch (QuizItem.QuestionType)
            {
                case QuestionTypeEnum.MultipleChoice:
                    @if (QuizItem.Question.Length > 1)
                    {
                        <MainButton Text="a" Color="@(SettingsState.ThemeColorString)" OnClick="@(e => OnAnswerHandler(0))"/>
                    }
                    @if (QuizItem.Question.Length > 2)
                    {
                        <MainButton Text="b" Color="@(SettingsState.ThemeColorString)" OnClick="@(e => OnAnswerHandler(1))"/>
                    }
                    @if (QuizItem.Question.Length > 3)
                    {
                        <MainButton Text="c" Color="@(SettingsState.ThemeColorString)" OnClick="@(e => OnAnswerHandler(2))"/>
                    }
                    @if (QuizItem.Question.Length > 4)
                    {
                        <MainButton Text="d" Color="@(SettingsState.ThemeColorString)" OnClick="@(e => OnAnswerHandler(3))"/>
                    }
                    
                    break;
                    
                case QuestionTypeEnum.Boolean:
                    <MainButton Text="True" Color="@(SettingsState.ThemeColorString)" OnClick="@(e => OnAnswerHandler(0))"/>
                    <MainButton Text="False" Color="@(SettingsState.ThemeColorString)" OnClick="@(e => OnAnswerHandler(1))"/>
                    break;
                case QuestionTypeEnum.Verbal:
                    <MainButton Text="Do you have your answer?" Color="@(SettingsState.ThemeColorString)" OnClick="@(e => OnAnswerHandler(0))"/>
                    break;
                
                default:
                    break;
            }
        }
        else
        {
            <button class="p-3 bg-@(QuizItem.AnswerIndex == UserAnswerIndex ? SettingsState.TrinaryColorString : SettingsState.SecondaryColorString)-600 flex items-center justify-center rounded-lg text-white">
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                @if(QuizItem.AnswerIndex == UserAnswerIndex)
                {
                    <span>Correct!</span>
                }
                else
                {
                    <span>Incorrect</span>
                }
            </button>
        }
    </div>

</div>

@code
{
    private IQuizItem QuizItem {get; set;}

    private bool ShowAnswer {get; set;}
    private int UserAnswerIndex {get; set;}

    [Inject]
    protected QuizDataService DataService { get; set; }

    protected override void OnInitialized()
    {
        QuizItem = DataService.GetNextQuizItem(0, 10);
        ShowAnswer = false;
        base.OnInitialized();
    }

    private void OnSkipHandler()
    {
        QuizItem = DataService.GetNextQuizItem(0, 10);
        ShowAnswer = false;
        StateHasChanged();
    }

    private void OnAnswerHandler(int answerIndex)
    {
        UserAnswerIndex = answerIndex;
        ShowAnswer = true;
        LoadNextQuestionAsync();
        StateHasChanged();
    }

    public async void LoadNextQuestionAsync()
    {
        await Task.Delay(3000);
        ShowAnswer = false;
        UserAnswerIndex = -1;
        QuizItem = DataService.GetNextQuizItem(0, 10);
        StateHasChanged();
    }

    private string ChoiceOptionStyle(int index)
    {   
        if(ShowAnswer)
        {
            return index == QuizItem.AnswerIndex ? 
                $"animate-pulse text-{SettingsState.TrinaryColorString}-600" : 
                "text-{SettingsState.ThemeColorString}-100";
        }
        return null;        
    }
}    